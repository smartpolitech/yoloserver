// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `yoloserver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____yoloserver_h__
#define ____yoloserver_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompYoloServer
{

class YoloServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompYoloServer::YoloServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompYoloServer::YoloServer*);

}

}

namespace RoboCompYoloServer
{

class YoloServer;
bool operator==(const YoloServer&, const YoloServer&);
bool operator<(const YoloServer&, const YoloServer&);
::Ice::Object* upCast(::RoboCompYoloServer::YoloServer*);
typedef ::IceInternal::Handle< ::RoboCompYoloServer::YoloServer> YoloServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompYoloServer::YoloServer> YoloServerPrx;
void __patch(YoloServerPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompYoloServer
{

struct Box
{
    ::std::string label;
    ::Ice::Int x;
    ::Ice::Int y;
    ::Ice::Int w;
    ::Ice::Int h;
    ::Ice::Float prob;
};

typedef ::std::vector< ::RoboCompYoloServer::Box> ListBox;

struct Pixel
{
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;

    bool operator==(const Pixel& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(r != __rhs.r)
        {
            return false;
        }
        if(g != __rhs.g)
        {
            return false;
        }
        if(b != __rhs.b)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Pixel& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(r < __rhs.r)
        {
            return true;
        }
        else if(__rhs.r < r)
        {
            return false;
        }
        if(g < __rhs.g)
        {
            return true;
        }
        else if(__rhs.g < g)
        {
            return false;
        }
        if(b < __rhs.b)
        {
            return true;
        }
        else if(__rhs.b < b)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Pixel& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Pixel& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Pixel& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Pixel& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Ice::Byte> ListPixel;

struct Image
{
    ::Ice::Int w;
    ::Ice::Int h;
    ::RoboCompYoloServer::ListPixel lpixel;
};

struct Labels
{
    bool isReady;
    ::RoboCompYoloServer::ListBox lBox;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompYoloServer::Box>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 21;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompYoloServer::Box, S>
{
    static void write(S* __os, const ::RoboCompYoloServer::Box& v)
    {
        __os->write(v.label);
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.w);
        __os->write(v.h);
        __os->write(v.prob);
    }
};

template<class S>
struct StreamReader< ::RoboCompYoloServer::Box, S>
{
    static void read(S* __is, ::RoboCompYoloServer::Box& v)
    {
        __is->read(v.label);
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.w);
        __is->read(v.h);
        __is->read(v.prob);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloServer::Pixel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompYoloServer::Pixel, S>
{
    static void write(S* __os, const ::RoboCompYoloServer::Pixel& v)
    {
        __os->write(v.r);
        __os->write(v.g);
        __os->write(v.b);
    }
};

template<class S>
struct StreamReader< ::RoboCompYoloServer::Pixel, S>
{
    static void read(S* __is, ::RoboCompYoloServer::Pixel& v)
    {
        __is->read(v.r);
        __is->read(v.g);
        __is->read(v.b);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloServer::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompYoloServer::Image, S>
{
    static void write(S* __os, const ::RoboCompYoloServer::Image& v)
    {
        __os->write(v.w);
        __os->write(v.h);
        __os->write(v.lpixel);
    }
};

template<class S>
struct StreamReader< ::RoboCompYoloServer::Image, S>
{
    static void read(S* __is, ::RoboCompYoloServer::Image& v)
    {
        __is->read(v.w);
        __is->read(v.h);
        __is->read(v.lpixel);
    }
};

template<>
struct StreamableTraits< ::RoboCompYoloServer::Labels>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompYoloServer::Labels, S>
{
    static void write(S* __os, const ::RoboCompYoloServer::Labels& v)
    {
        __os->write(v.isReady);
        __os->write(v.lBox);
    }
};

template<class S>
struct StreamReader< ::RoboCompYoloServer::Labels, S>
{
    static void read(S* __is, ::RoboCompYoloServer::Labels& v)
    {
        __is->read(v.isReady);
        __is->read(v.lBox);
    }
};

}

namespace RoboCompYoloServer
{

class Callback_YoloServer_addImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YoloServer_addImage_Base> Callback_YoloServer_addImagePtr;

class Callback_YoloServer_getData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YoloServer_getData_Base> Callback_YoloServer_getDataPtr;

}

namespace IceProxy
{

namespace RoboCompYoloServer
{

class YoloServer : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int addImage(const ::RoboCompYoloServer::Image& img)
    {
        return addImage(img, 0);
    }
    ::Ice::Int addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context& __ctx)
    {
        return addImage(img, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addImage(const ::RoboCompYoloServer::Image& img, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addImage(img, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(const ::RoboCompYoloServer::Image& img, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImage(img, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addImage(img, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImage(img, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompYoloServer::YoloServerPrx __proxy = ::RoboCompYoloServer::YoloServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_addImage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_addImage(img, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image& img)
    {
        return begin_addImage(img, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context& __ctx)
    {
        return begin_addImage(img, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(img, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(img, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image& img, const ::RoboCompYoloServer::Callback_YoloServer_addImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(img, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image& img, const ::Ice::Context& __ctx, const ::RoboCompYoloServer::Callback_YoloServer_addImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImage(img, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_addImage(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int addImage(const ::RoboCompYoloServer::Image&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addImage(const ::RoboCompYoloServer::Image&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompYoloServer::Labels getData(::Ice::Int id)
    {
        return getData(id, 0);
    }
    ::RoboCompYoloServer::Labels getData(::Ice::Int id, const ::Ice::Context& __ctx)
    {
        return getData(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getData(::Ice::Int id, const ::IceInternal::Function<void (const ::RoboCompYoloServer::Labels&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(::Ice::Int id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getData(::Ice::Int id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompYoloServer::Labels&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(::Ice::Int id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getData(::Ice::Int id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompYoloServer::Labels&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompYoloServer::Labels&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompYoloServer::YoloServerPrx __proxy = ::RoboCompYoloServer::YoloServerPrx::uncheckedCast(__result->getProxy());
                ::RoboCompYoloServer::Labels __ret;
                try
                {
                    __ret = __proxy->end_getData(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompYoloServer::Labels&)> _response;
        };
        return begin_getData(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int id)
    {
        return begin_getData(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int id, const ::Ice::Context& __ctx)
    {
        return begin_getData(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int id, const ::RoboCompYoloServer::Callback_YoloServer_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int id, const ::Ice::Context& __ctx, const ::RoboCompYoloServer::Callback_YoloServer_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(id, &__ctx, __del, __cookie);
    }

    ::RoboCompYoloServer::Labels end_getData(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompYoloServer::Labels getData(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getData(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<YoloServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_twoway() const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_oneway() const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_batchOneway() const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_datagram() const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_batchDatagram() const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YoloServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<YoloServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompYoloServer
{

class YoloServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int addImage(const ::RoboCompYoloServer::Image&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompYoloServer::Labels getData(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompYoloServer
{

class YoloServer : virtual public ::IceDelegate::RoboCompYoloServer::YoloServer,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int addImage(const ::RoboCompYoloServer::Image&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompYoloServer::Labels getData(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompYoloServer
{

class YoloServer : virtual public ::IceDelegate::RoboCompYoloServer::YoloServer,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int addImage(const ::RoboCompYoloServer::Image&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompYoloServer::Labels getData(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompYoloServer
{

class YoloServer : virtual public ::Ice::Object
{
public:

    typedef YoloServerPrx ProxyType;
    typedef YoloServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int addImage(const ::RoboCompYoloServer::Image&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompYoloServer::Labels getData(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const YoloServer& l, const YoloServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const YoloServer& l, const YoloServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompYoloServer
{

template<class T>
class CallbackNC_YoloServer_addImage : public Callback_YoloServer_addImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_YoloServer_addImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompYoloServer::YoloServerPrx __proxy = ::RoboCompYoloServer::YoloServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_YoloServer_addImagePtr
newCallback_YoloServer_addImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloServer_addImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YoloServer_addImagePtr
newCallback_YoloServer_addImage(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloServer_addImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YoloServer_addImage : public Callback_YoloServer_addImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_YoloServer_addImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompYoloServer::YoloServerPrx __proxy = ::RoboCompYoloServer::YoloServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YoloServer_addImagePtr
newCallback_YoloServer_addImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloServer_addImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YoloServer_addImagePtr
newCallback_YoloServer_addImage(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloServer_addImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YoloServer_getData : public Callback_YoloServer_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompYoloServer::Labels&);

    CallbackNC_YoloServer_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompYoloServer::YoloServerPrx __proxy = ::RoboCompYoloServer::YoloServerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompYoloServer::Labels __ret;
        try
        {
            __ret = __proxy->end_getData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_YoloServer_getDataPtr
newCallback_YoloServer_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompYoloServer::Labels&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloServer_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YoloServer_getDataPtr
newCallback_YoloServer_getData(T* instance, void (T::*cb)(const ::RoboCompYoloServer::Labels&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YoloServer_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YoloServer_getData : public Callback_YoloServer_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompYoloServer::Labels&, const CT&);

    Callback_YoloServer_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompYoloServer::YoloServerPrx __proxy = ::RoboCompYoloServer::YoloServerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompYoloServer::Labels __ret;
        try
        {
            __ret = __proxy->end_getData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YoloServer_getDataPtr
newCallback_YoloServer_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompYoloServer::Labels&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloServer_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YoloServer_getDataPtr
newCallback_YoloServer_getData(T* instance, void (T::*cb)(const ::RoboCompYoloServer::Labels&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YoloServer_getData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
